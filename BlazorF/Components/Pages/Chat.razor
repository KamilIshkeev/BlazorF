@* <!-- Pages/Chat.razor -->
@page "/movie/{movieId: int}"
@using System.Net.Http.Headers;
@inject HttpClient Http
@implements IDisposable
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client



<h3>Чат для фильма</h3>
<h2>@movie.Title</h2>
<ul>
    @foreach (var message in messages)
    {
        <li>
            <strong>@Counter.idU:</strong> @message.Content
            @if (message.Photos != null && message.Photos.Any())
            {
                <div>
                    @foreach (var photo in message.Photos)
                    {
                        <img src="@photo.FilePath" width="100" />
                    }
                </div>
            }
        </li>
    }
</ul>

<form @onsubmit="SendNewMessage">
    <input type="text" @bind="newMessage.Content" placeholder="Введите сообщение..." />
    <button type="submit">Отправить</button>
</form>

@code {
    [Parameter]
    public static int movieId { get; set; }

    private List<Message> messages = new();
    private Message newMessage = new() { MovieId = movieId };
    private HubConnection hubConnection;
    private Movie movie;

    protected override async Task OnInitializedAsync()
    {
        movie = await Http.GetFromJsonAsync<Movie>($"api/movies/{movieId}");
        // Инициализация соединения SignalR
        hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:7023/chatHub").Build();

        var usar = Counter.idU.Name;
        // Подписываемся на получение новых сообщений
        hubConnection.On<string, string, int?>("ReceiveMessage1", (usar, message, movieId) =>
        {
            if (movieId == movieId)
            {
                messages.Add(new Message
                    {
                        User = Counter.idU,
                        Content = message,
                        MovieId = movieId
                    });
                StateHasChanged(); // Обновляем интерфейс
            }
        });

        // Подключаемся к серверу
        await hubConnection.StartAsync();

        // Загружаем начальные сообщения
        messages = await Http.GetFromJsonAsync<List<Message>>($"api/Chat/movie/{movieId}");
    }

    private async Task SendNewMessage()
    {
        await Http.PostAsJsonAsync("api/Chat", newMessage);

        // Отправляем сообщение через SignalR
        await hubConnection.SendAsync("SendMessageMov", Counter.idU.Name, newMessage.Content, movieId);

        messages.Add(newMessage);
        newMessage = new() { MovieId = movieId };
    }

    public void Dispose()
    {
        // Закрываем соединение при выходе из компонента
        hubConnection?.DisposeAsync().GetAwaiter().GetResult();
    }
} *@
@page "/lsmessage"
@using System.Net.Http.Headers;
@inject HttpClient Http

@inject IJSRuntime JS
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client


@if (isVariable)
{
    <div class="container">
        <h3>Управление пользователями</h3>
        <h4>Список пользователей</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Имя</th>
                    <th>Email</th>
                    <th>Описание</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in usr)
                {
                    <tr>
                        <td>@user.Name</td>
                        <td>@user.Email</td>
                        <td>@user.Description</td>
                        <td>

                            <button @onclick="() => ConectUser2(user.Id)" class="btn btn-danger">Написать</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
}
else
{ 
    <ul>
        @foreach (var msg in messages1)
        {
            @foreach (var Us in usr)
            {
                @if (msg.UserId1 == idUs && msg.UserId2 == Uid2)
                {
                    <li>
                        <strong>@Us.Name:</strong>
                        @if (!string.IsNullOrEmpty(msg.Content))
                        {
                            <span>@msg.Content</span>
                        }
                        @if (!string.IsNullOrEmpty(msg.Url))
                        {
                            <img src="@msg.Url" alt="Uploaded photo" />
                        }
                    </li>
                }
            }
        }
    </ul>

    <div class="form-container">
        <input @bind-value="message" placeholder="Type a message..." />
        <input placeholder="Enter image URL" @bind-value="photoUrl" />
        <button @onclick="SendMessage">Send</button>
        <button @onclick="UpInterface">Обновить</button>
    </div>
}



@code {

    private bool isVariable = true;
    private void ToggleFormU() => isVariable = !isVariable; 
    string message = "";
    string user = "";
    string iUser = @Counter.idU.Name;
    string movie = "";
    HubConnection hubConnection;
    List<string> messages = new List<string>();
    List<LsMessage> messages1 = new List<LsMessage>();
    private List<Movie> movies = new List<Movie>();
    private User user1;
    public string selectedMovieId;
    public int ID;
    public string MovTitle;
    public int idmov;
    public int idUs = @Counter.idU.Id;
    private string photoUrl = "";
    private int selectedMessageId;
    public string NameU;
    private List<User> usr = new List<User>();
    private List<string> items = new List<string>();
    private System.Timers.Timer timer;
    public int Uid2;






    private async Task LoadMessage()
    {

        try
        {
            var response = await Http.GetAsync("api/Chat/lsMessage");
            if (response.IsSuccessStatusCode)
            {
                messages1 = await response.Content.ReadFromJsonAsync<List<LsMessage>>();

            }
            else
            {
                ShowAlert($"Ошибка загрузки сообщений: {response.StatusCode}");
            }


        }
        catch (Exception ex)
        {
            // ShowAlert($"Ошибка: {ex.Message}");
        }


    }


    private async Task LoadUser()
    {

        try
        {
            var response = await Http.GetAsync("api/User");
            if (response.IsSuccessStatusCode)
            {

                usr = await response.Content.ReadFromJsonAsync<List<User>>();
            }
            else
            {
                ShowAlert($"Ошибка загрузки сообщений: {response.StatusCode}");
            }


        }
        catch (Exception ex)
        {
            // ShowAlert($"Ошибка: {ex.Message}");
        }


    }


    private async Task ConectUser2(int Id2)
    {
        isVariable = false;
        Uid2 = Id2;
        await RegUser();
        await LoadMessage();
    }

    async Task RegUser()
    {
        await hubConnection.SendAsync("RegisterUser", iUser);
        user1 = await Http.GetFromJsonAsync<User>($"api/User/{Uid2}");
        if (user1 == null)
        {
            ShowAlert("Received an empty movie object.");
            return;
        }
        NameU = user1.Name;
        await hubConnection.SendAsync("RegisterUser", NameU);
        // message = string.Empty;
    }



    protected override async Task OnInitializedAsync()
    {

        await LoadUser();
        // await LoadMessage();

        user = iUser;
        hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:7023/chatHub").Build();
        try
        {
            
            hubConnection.On<string, string>("ReceiveMessageLs", (user, message) =>
            {

                var newMessage = new LsMessage
                    {
                        UserId1 = int.Parse(iUser),
                        UserId2 = Uid2,
                        Content = message,
                        Url = photoUrl
                    };

                UpdateMessages(newMessage);

                InvokeAsync(StateHasChanged);
                StateHasChanged();

            });
            await InvokeAsync(StateHasChanged);
            hubConnection.On<string, string>("ReceivePhotoLs", (user, photoPath) =>
            {

                var newMessage = new LsMessage
                    {
                        UserId1 = idUs,
                        UserId2 = Uid2,
                        Content = message,
                        Url = photoUrl
                    };

                UpdateMessages(newMessage);

                InvokeAsync(StateHasChanged);
                StateHasChanged();

            });
            await InvokeAsync(StateHasChanged);


            await hubConnection.StartAsync();

        }
        catch
        {
            ShowAlert($"Error sending message: {hubConnection.State}");
        }


        timer = new System.Timers.Timer(1500); // Каждые 2 секунды
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;




    }

    private void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            LoadMessage();
            StateHasChanged();
        });
    }



    public async Task UpInterface()
    {
        await LoadMessage();
        await InvokeAsync(StateHasChanged);
    }


    private void UpdateMessages(LsMessage newMessage)
    {
        messages1.Add(newMessage);
        LoadMessage();// Добавляем новое сообщение в список
        InvokeAsync(StateHasChanged); // Обновляем интерфейс
    }




    async Task SendMessage()
    {
        
        var newMessage = new LsMessage
            {
                UserId1 = idUs,
                UserId2 = Uid2,
                Content = message,
                Url = photoUrl
            };

        var response = await Http.PostAsJsonAsync("api/Chat/lsMes", newMessage);
        if (response.IsSuccessStatusCode)
        {

            try
            {
                if (hubConnection.State == HubConnectionState.Connected)
                {

                    await hubConnection.SendAsync("SendMessageLs", user, message, MovTitle);
                    await InvokeAsync(StateHasChanged);
                    if (photoUrl != "")
                    {
                        await hubConnection.SendAsync("SendPhotoLs", user, photoUrl, MovTitle);

                    }
                    await InvokeAsync(StateHasChanged);

                }
                else
                {
                    ShowAlert("Hub connection is not established.");
                }
            }
            catch (Exception ex)
            {
                ShowAlert($"Error sending message: {ex.Message}");
            }


        }
        else
        {
            ShowAlert($"Ошибка при отправке сообщения: {response.StatusCode}");
        }

        await InvokeAsync(StateHasChanged);

        message = string.Empty;

        await LoadMessage();

    }






    private void ShowAlert(string message)
    {
        JS.InvokeVoidAsync("alert", message);
    }

    


    public async Task FilmConnect()
    {
        try
        {


            


            var newMessage = new LsMessage
                {
                    UserId1 = idUs,
                    UserId2 = Uid2,
                    Content = message,
                    Url = photoUrl
                };

            var response = await Http.PostAsJsonAsync("api/Chat", newMessage);
            if (response.IsSuccessStatusCode)
            {

                try
                {
                    if (hubConnection.State == HubConnectionState.Connected)
                    {

                        await hubConnection.SendAsync("SendMessageLs", user, message);
                        await InvokeAsync(StateHasChanged);
                        if (photoUrl != "")
                        {
                            await hubConnection.SendAsync("SendPhotoLs", user, photoUrl);

                        }
                        await InvokeAsync(StateHasChanged);

                    }
                    else
                    {
                        ShowAlert("Hub connection is not established.");
                    }
                }
                catch (Exception ex)
                {
                    ShowAlert($"Error sending message: {ex.Message}");
                }


            }
            else
            {
                ShowAlert($"Ошибка при отправке сообщения: {response.StatusCode}");
            }

        }
        catch (Exception ex)
        {
            ShowAlert($"Error: {ex.Message}");
        }

    }


    
}
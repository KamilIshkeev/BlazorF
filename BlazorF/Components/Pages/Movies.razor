@* @page "/movies"
@using BlazorF.ApiFilm.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<style>
    body {
        background-color: #f8f9fa; /* Светлый фон */
    }
    h3 {
        color: #4169E1; /* Цвет заголовка */
    }
    .btn-primary {
        background-color: #1E90FF;
        border-color: #1E90FF;
    }

    .btn-primary:hover {
            background-color: #87CEFA;
            border-color: #87CEFA;
    }

    .table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

    .table th, .table td {
        padding: 12px;
        border: 1px solid #dee2e6;
        text-align: center;
    }

    .table th {
        background-color: #1E90FF;
        color: white;
    }

</style>

<h3>Каталог фильмов</h3>

<input @bind="searchString" placeholder="Введите название фильма для поиска" />

@if (movies == null)
{
    <p><em>Загрузка...</em></p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Url</th>
                <th>Название</th>
                <th>Жанр</th>
                <th>Рейтинг</th>
                <th>Информация</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredMovies.Any())
            {
            @foreach (var movie in filteredMovies)
            {
                <tr>
                    <td><img src="@movie.ImageUrl" alt="@movie.Title" /></td>
                    <td>@movie.Title</td>
                    <td>@movie.Genre</td>
                    <td>@movie.Rating</td>
                    <td>
                        <NavLink href="@($"/movies/{movie.Id}")" class="btn btn-primary">Подробнее</NavLink>
                    </td>
                </tr>
            }
            }
            else
            {
                <tr>
                    <td colspan="3">Нет результатов.</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Movie>? movies;
    private string searchString = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        movies = await Http.GetFromJsonAsync<List<Movie>>("api/movies"); // Замените на правильный URL вашего API
    }

    private IEnumerable<Movie> filteredMovies => movies
       .Where(m => string.IsNullOrEmpty(searchString) || m.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase));



} *@













@page "/movies"
@using BlazorF.ApiFilm.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<style>
    /* Ваши стили остаются прежними */
</style>

<h3>Каталог фильмов</h3>

<input @bind="searchString" placeholder="Введите название фильма для поиска" />
<button @onclick="SearchMovies1" class="btn btn-primary">Поиск</button>

@if (isLoading)
{
    <p><em>Загрузка...</em></p>
}
else
{
    @if (!string.IsNullOrEmpty(searchMessage))
    {
        <p class="search-message">@searchMessage</p>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Изображение</th>
                <th>Название</th>
                <th>Жанр</th>
                <th>Рейтинг</th>
                <th>Информация</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredMovies.Any())
            {
                foreach (var movie in filteredMovies)
                {
                    <tr>
                        <td><img src="@movie.ImageUrl" alt="@movie.Title" style="max-width: 100px; max-height: 150px;" /></td>
                        <td>@movie.Title</td>
                        <td>@movie.Genre</td>
                        <td>@movie.Rating</td>
                        <td>
                            <NavLink href="@($"/movies/{movie.Id}")" class="btn btn-primary">Подробнее</NavLink>
                        </td>
                        
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5">Нет результатов.</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Movie> movies = new();
    private List<Movie> filteredMovies = new(); 
    private string searchString = string.Empty;
    private bool isLoading = true;
    private string searchMessage = string.Empty; 

    protected override async Task OnInitializedAsync()
    {
        movies = await Http.GetFromJsonAsync<List<Movie>>("api/movies"); 
        Console.WriteLine($"Loaded {movies.Count} movies.");
        filteredMovies = movies; 
        isLoading = false;
        
    }

    private async Task SearchMovies1()
    {
        await ShowAlert("WEy"); // Вызываем асинхронный метод с await
        Console.WriteLine("Loaded movies.");
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredMovies = movies; 
            searchMessage = "Показаны все фильмы."; 
        }
        else
        {
            filteredMovies = movies
                .Where(m => m.Title.ToLower().Contains(searchString.ToLower()))
                .ToList(); 

            searchMessage = filteredMovies.Any() 
                ? $"Найдено фильмов: {filteredMovies.Count}." 
                : "Ничего не найдено."; 
        }

        StateHasChanged(); // Обновляем интерфейс
    }

    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message); // Используем await для асинхронного вызова
    }
}